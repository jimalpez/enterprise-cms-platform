generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  admin
  editor
  author
  viewer
}

enum ContentStatus {
  draft
  published
  archived
}

enum ContentType {
  article
  page
  media
}

enum SubscriptionStatus {
  active
  canceled
  incomplete
  incomplete_expired
  past_due
  trialing
  unpaid
}

enum PaymentStatus {
  pending
  succeeded
  failed
  refunded
}

model Subscription {
  id                   String             @id @default(cuid())
  userId               String
  stripeSubscriptionId String             @unique
  stripeCustomerId     String?
  stripePriceId        String
  status               SubscriptionStatus
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean            @default(false)
  canceledAt           DateTime?
  trialStart           DateTime?
  trialEnd             DateTime?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments Payment[]

  @@index([userId])
  @@index([stripeSubscriptionId])
  @@index([stripeCustomerId])
  @@map("subscriptions")
}

model Payment {
  id              String        @id @default(cuid())
  userId          String
  subscriptionId  String?
  stripePaymentId String        @unique
  stripeInvoiceId String?
  amount          Int // Amount in cents
  currency        String        @default("usd")
  status          PaymentStatus
  description     String?
  receiptUrl      String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([subscriptionId])
  @@index([stripePaymentId])
  @@map("payments")
}

model User {
  id               String   @id @default(cuid())
  email            String   @unique
  password         String?
  role             UserRole @default(viewer)
  name             String
  avatar           String?
  stripeCustomerId String?
  emailVerified    DateTime?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  contents        Content[]
  comments        Comment[]
  contentVersions ContentVersion[]
  media           Media[]
  refreshTokens   RefreshToken[]
  subscriptions   Subscription[]
  payments        Payment[]

  accounts        Account[]
  sessions        Session[]

  @@index([email])
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}


model Content {
  id            String        @id @default(cuid())
  title         String
  slug          String        @unique
  content       String        @db.Text
  excerpt       String?
  type          ContentType   @default(article)
  status        ContentStatus @default(draft)
  authorId      String
  featuredImage String?
  tags          String[]
  metadata      Json          @default("{}")
  version       Int           @default(1)
  publishedAt   DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  author   User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  versions ContentVersion[]
  comments Comment[]

  @@index([slug])
  @@index([authorId])
  @@index([status])
  @@index([type])
  @@index([publishedAt])
  @@map("contents")
}

model ContentVersion {
  id          String    @id @default(cuid())
  contentId   String
  version     Int
  data        Json
  createdBy   String
  createdAt   DateTime  @default(now())
  publishedAt DateTime?

  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  creator User    @relation(fields: [createdBy], references: [id])

  @@unique([contentId, version])
  @@index([contentId])
  @@map("content_versions")
}

model Comment {
  id        String   @id @default(cuid())
  contentId String
  userId    String
  parentId  String?
  text      String   @db.Text
  likes     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content Content   @relation(fields: [contentId], references: [id], onDelete: Cascade)
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies Comment[] @relation("CommentReplies")

  @@index([contentId])
  @@index([userId])
  @@index([parentId])
  @@map("comments")
}

model Media {
  id         String   @id @default(cuid())
  url        String
  filename   String
  mimetype   String
  size       Int
  width      Int?
  height     Int?
  uploadedBy String
  createdAt  DateTime @default(now())

  uploader User @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)

  @@index([uploadedBy])
  @@map("media")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@map("refresh_tokens")
}
